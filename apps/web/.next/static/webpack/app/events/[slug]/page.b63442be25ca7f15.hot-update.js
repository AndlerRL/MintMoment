"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/events/[slug]/page",{

/***/ "(app-pages-browser)/./components/video-recorder.tsx":
/*!***************************************!*\
  !*** ./components/video-recorder.tsx ***!
  \***************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   VideoRecorder: function() { return /* binding */ VideoRecorder; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _components_shared_video_ui__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/components/shared/video-ui */ \"(app-pages-browser)/./components/shared/video-ui.tsx\");\n/* harmony import */ var _utils_supabase_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/utils/supabase/client */ \"(app-pages-browser)/./utils/supabase/client.ts\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! socket.io-client */ \"(app-pages-browser)/./node_modules/socket.io-client/build/esm/index.js\");\n/* __next_internal_client_entry_do_not_use__ VideoRecorder auto */ \nvar _s = $RefreshSig$();\n\n\n\n\nfunction VideoRecorder(param) {\n    let { eventData, onVideoUploaded } = param;\n    _s();\n    const [isStreaming, setIsStreaming] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(false);\n    const [previewUrl, setPreviewUrl] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)();\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_3__.useState)(null);\n    const streamerVideoRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const streamMediaRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const mediaRecorderRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const chunksRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)([]);\n    const socketRef = (0,react__WEBPACK_IMPORTED_MODULE_3__.useRef)(null);\n    const supabase = (0,_utils_supabase_client__WEBPACK_IMPORTED_MODULE_2__.createClient)();\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        socketRef.current = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_4__.io)();\n        socketRef.current.on(\"connect\", ()=>{\n            var _socketRef_current;\n            console.log(\"Connected to Socket.IO server\");\n            (_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.emit(\"join-room\", eventData.id);\n        });\n        socketRef.current.on(\"viewer-joined\", (viewerId)=>{\n            console.log(\"Viewer joined:\", viewerId);\n        // You might want to do something when a viewer joins, like sending initial stream data\n        });\n        return ()=>{\n            var _socketRef_current;\n            stopStreamingAndRecording();\n            (_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.disconnect();\n        };\n    }, [\n        eventData.id\n    ]);\n    const startMediaStream = async ()=>{\n        console.log(\"Starting media stream\");\n        const stream = await navigator.mediaDevices.getUserMedia({\n            video: true,\n            audio: true\n        });\n        streamMediaRef.current = stream;\n        if (streamerVideoRef.current) {\n            streamerVideoRef.current.srcObject = stream;\n        }\n        console.log(\"Local video preview set\");\n        console.log(\"Audio tracks:\", stream.getAudioTracks());\n    };\n    // biome-ignore lint/correctness/useExhaustiveDependencies: <explanation>\n    (0,react__WEBPACK_IMPORTED_MODULE_3__.useEffect)(()=>{\n        startMediaStream();\n    }, []);\n    const startStreamingAndRecording = async ()=>{\n        if (!streamMediaRef.current) {\n            setError(\"No media stream available\");\n            return;\n        }\n        startMediaStream();\n        try {\n            var _data_user, // Emit start-stream event with stream ID\n            _socketRef_current, _socketRef_current1;\n            // Create a stream record in Supabase\n            const { data: streamData, error: streamError } = await supabase.from(\"streams\").insert({\n                event_id: eventData.id,\n                user_id: (_data_user = (await supabase.auth.getUser()).data.user) === null || _data_user === void 0 ? void 0 : _data_user.id,\n                status: \"live\"\n            }).select().single();\n            if (streamError) throw streamError;\n            setIsStreaming(true);\n            console.log(\"Stream started:\", streamData);\n            (_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.emit(\"start-stream\", {\n                eventId: eventData.id,\n                streamId: streamData.id\n            });\n            setIsStreaming(true);\n            console.log(\"Emitting start-stream event\");\n            (_socketRef_current1 = socketRef.current) === null || _socketRef_current1 === void 0 ? void 0 : _socketRef_current1.emit(\"start-stream\", eventData.id);\n            // Set up MediaRecorder for local recording and streaming\n            const mediaRecorder = new MediaRecorder(streamMediaRef.current, {\n                mimeType: \"video/webm; codecs=vp9,opus\"\n            });\n            mediaRecorder.ondataavailable = (event)=>{\n                if (event.data.size > 0) {\n                    chunksRef.current.push(event.data);\n                    console.log(\"Data available:\", event.data);\n                    // Send chunk via Socket.IO\n                    const reader = new FileReader();\n                    reader.onloadend = ()=>{\n                        var _socketRef_current;\n                        const arrayBuffer = reader.result;\n                        (_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.emit(\"stream-chunk\", {\n                            roomId: eventData.id,\n                            chunk: arrayBuffer\n                        });\n                    };\n                    reader.readAsArrayBuffer(event.data);\n                }\n            };\n            mediaRecorder.onstop = createPreview;\n            mediaRecorderRef.current = mediaRecorder;\n            mediaRecorder.start(1000); // Collect data every second\n            setPreviewUrl(undefined); // Clear any existing preview\n        } catch (err) {\n            console.error(\"Error starting stream and recording:\", err);\n            setError(\"Failed to start streaming and recording\");\n        }\n    };\n    const stopStreamingAndRecording = async ()=>{\n        var _data_user, _socketRef_current;\n        if (mediaRecorderRef.current && mediaRecorderRef.current.state !== \"inactive\") {\n            mediaRecorderRef.current.stop();\n        }\n        if (streamMediaRef.current) {\n            for (const track of streamMediaRef.current.getTracks()){\n                track.stop();\n            }\n        }\n        // Update stream record in Supabase\n        const { data: streamData, error: streamError } = await supabase.from(\"streams\").update({\n            status: \"ended\"\n        }).eq(\"event_id\", eventData.id).eq(\"user_id\", (_data_user = (await supabase.auth.getUser()).data.user) === null || _data_user === void 0 ? void 0 : _data_user.id).eq(\"status\", \"live\");\n        if (streamError) {\n            console.error(\"Error updating stream record:\", streamError);\n            setError(\"Failed to update stream record\");\n            throw streamError;\n        }\n        setIsStreaming(false);\n        (_socketRef_current = socketRef.current) === null || _socketRef_current === void 0 ? void 0 : _socketRef_current.emit(\"end-stream\", {\n            eventId: eventData.id,\n            streamId: streamData.id\n        });\n    };\n    const createPreview = ()=>{\n        const blob = new Blob(chunksRef.current, {\n            type: \"video/webm\"\n        });\n        const url = URL.createObjectURL(blob);\n        console.log(\"previewLink created: \", url);\n        setPreviewUrl(url);\n    };\n    const uploadVideo = async ()=>{\n        if (chunksRef.current.length === 0) {\n            setError(\"No recorded data available\");\n            return;\n        }\n        const blob = new Blob(chunksRef.current, {\n            type: \"video/webm\"\n        });\n        const file = new File([\n            blob\n        ], \"event_\".concat(eventData.id, \"_\").concat(Date.now(), \".webm\"), {\n            type: \"video/webm\"\n        });\n        try {\n            const { data, error } = await supabase.storage.from(\"videos\").upload(\"event_\".concat(eventData.id, \"/\").concat(file.name), file);\n            if (error) throw error;\n            const { data: { publicUrl } } = supabase.storage.from(\"videos\").getPublicUrl(data.path);\n            onVideoUploaded(publicUrl);\n            chunksRef.current = []; // Clear chunks after successful upload\n        } catch (err) {\n            console.error(\"Error uploading video:\", err);\n            setError(\"Failed to upload video\");\n        }\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(_components_shared_video_ui__WEBPACK_IMPORTED_MODULE_1__.VideoUI, {\n        error: error,\n        eventData: eventData,\n        previewUrl: previewUrl,\n        isStreaming: isStreaming,\n        streamMediaRef: streamMediaRef,\n        streamerVideoRef: streamerVideoRef,\n        onUploadStreamedVideo: uploadVideo,\n        onStreamingStop: stopStreamingAndRecording,\n        onStreamingStart: startStreamingAndRecording,\n        onOpenChat: ()=>console.log(\"Open chat\"),\n        onOpenAvatar: ()=>console.log(\"Open avatar\"),\n        onLikeAction: ()=>console.log(\"Like action\"),\n        onShareAction: ()=>console.log(\"Share action\"),\n        onToggleAiNarrator: ()=>console.log(\"Toggle AI narrator\"),\n        streamer: true\n    }, void 0, false, {\n        fileName: \"/home/andler/Development/nextjs/stream-u-media/components/video-recorder.tsx\",\n        lineNumber: 202,\n        columnNumber: 5\n    }, this);\n}\n_s(VideoRecorder, \"MUCWCT6P1FuIME+aB1Bi7gK7jvE=\");\n_c = VideoRecorder;\nvar _c;\n$RefreshReg$(_c, \"VideoRecorder\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/video-recorder.tsx\n"));

/***/ })

});